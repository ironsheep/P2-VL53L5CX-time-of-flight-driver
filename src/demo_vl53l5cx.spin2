'' =================================================================================================
''
''   File....... demo_vl53l5cx.spin2
''   Purpose.... Utility to demonstrate interaction with our VL53L5CX time-of-flight sensor
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Aug 2022
''   Updated.... 5 Sep 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BR_TERM  = 230_400                                            ' terminal baud rate


CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }
  SD_SDI   = 59  { O }
  SD_SDO   = 58  { I }

  SDA1     = 57  { IO }                                         ' i2c (optional)
  SCL1     = 56  { IO }

CON { app io pins }

    PIN_HDMI_BASE = 8

    PIN_TOF_INT     = 16
    PIN_TOF_RST     = 17
    PIN_TOF_SDA     = 18
    PIN_TOF_SCL     = 19
    PIN_TOF_LPN     = 20
    PIN_TOF_PWREN   = 21


CON { basic constants }

    #true, ON, OFF                                                ' digital control
    #0, NO, YES

    TRIES = 1                                                     ' should not be needed!

    #0, S_LIST, S_MATRIX                                          ' display styles

    STYLE = S_MATRIX                                              ' selected style


OBJ { our sensors }

    tofSensor   : "isp_vl53l5cx"                      ' our device under test
    tvDebug     : "isp_hdmi_debug"                          ' Our HDMI display

VAR
    long    cog

    long    imageResolution
    long    frequencyHz8
    long    eRangingMode
    long    ePowerMode
    long    timeMsec32
    long    percent8
    long    targetOrder

DAT { run-time condition vars }

    bUseHDMI        long    TRUE        ' set to TRUE to enable HDMI use/output
    showHDMIDebug   long    FALSE

    senseStack      long    0[64]

    senseCog        long    0

    screenTitle     byte    "-- TOF Sensor object Debug --", 0

    bDataReady      long    FALSE

    configuredValue long    0
    readValue       long    0

CON { -------------- MAIN -------------- }

PUB main() | nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars, imageWidth, bDvcFound, eDvcStatus, bDataReturned, bDataUnloaded, readCt
    '' Main entry point of MPU 9DOF demo
    'debug(`term demoLog pos 700 455 size 70 14 textsize 12 color cyan)

    if bUseHDMI
        tvDebug.start(PIN_HDMI_BASE, @screenTitle)

        nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := getDebugData()
        debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)
    else
        showHDMIDebug := FALSE  ' force this off is not using HDMI

    bDvcFound := locateSensor()

    {
        ' device re-address testing
    moveSensorTo($5E)

    bDvcFound := locateSensor()

    repeat      ' hold here to check if worked

    '}

    if bDvcFound

{
        ' --------------------------------------------------------------------------
        '  UNCOMMENT this block to enable write/read-back testing of all mode setting
        ' --------------------------------------------------------------------------
        debug(" ")  ' blank line, sortof...
        tofSensor.enableTestingDebug(FALSE) ' set to TRUE if want to see write/read buffers during test

        ' do full test and validation of all set/get methods
        configuredValue := tofSensor.VL53L5CX_RESOLUTION_8X8
        tofSensor.setResolution(configuredValue)
        eDvcStatus, readValue := tofSensor.getResolution()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setResolution()")

        configuredValue := 6
        tofSensor.setRangingFrequencyHz(configuredValue)
        eDvcStatus, readValue := tofSensor.getRangingFrequencyHz()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setRangingFrequencyHz()")

        'configuredValue := tofSensor.VL53L5CX_RANG_MODE_AUTONOMOUS
        configuredValue := tofSensor.VL53L5CX_RANG_MODE_CONTINUOUS
        tofSensor.setRangingMode(configuredValue)
        eDvcStatus, readValue := tofSensor.getRangingMode()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setRangingMode()")

        'configuredValue := tofSensor.VL53L5CX_POWER_MODE_SLEEP
        configuredValue := tofSensor.VL53L5CX_POWER_MODE_WAKEUP
        tofSensor.setPowerMode(configuredValue)
        eDvcStatus, readValue := tofSensor.getPowerMode()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setPowerMode()")

        configuredValue := 7    ' timeInMs
        tofSensor.setIntegrationTime(configuredValue)
        eDvcStatus, readValue := tofSensor.getIntegrationTime()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setIntegrationTime()")

        configuredValue := 55    ' 55%
        tofSensor.setSharpenerPercent(configuredValue)
        eDvcStatus, readValue := tofSensor.getSharpenerPercent()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setSharpenerPercent()")

        configuredValue := tofSensor.VL53L5CX_TGT_ORDER_CLOSEST
        'configuredValue := tofSensor.VL53L5CX_TGT_ORDER_STRONGEST
        tofSensor.setTargetOrder(configuredValue)
        eDvcStatus, readValue := tofSensor.getTargetOrder()                     ' Query sensor for
        checkAndShowResult(configuredValue, readValue, eDvcStatus, @"setTargetOrder()")

        debug("* STOPPED for evaluation of display")
        repeat   ' hold here for eval
'}

        configuredValue := tofSensor.VL53L5CX_RESOLUTION_8X8
        tofSensor.setResolution(configuredValue)

        eDvcStatus, imageResolution := tofSensor.getResolution()                     ' Query sensor for
        imageWidth := sqrt imageResolution                               ' Calculate printing width
        debug("* imageResolution = ", udec_(imageResolution), udec(eDvcStatus))
        debug("* imageWidth = ", udec_(imageWidth))

        waitms(500) ' finish displaying before starting cog

        ' start ranging result display loop
        bDataReady := FALSE     ' have task wait until data is present
        cog := cogspin(NEWCOG, taskMonitorRanging(imageWidth), @senseStack) + 1  ' start TOF Listener
        waitms(500) ' let task announce itself in debug, then proceed

        tofSensor.enableIODebug(FALSE) ' set to TRUE if want to see write/read buffers during test
{
        ' --------------------------------------------------------------------------
        '  UNCOMMENT this block to see initial/default driver values
        ' --------------------------------------------------------------------------
        tofSensor.enableTestingDebug(FALSE) ' set to TRUE if want to see write/read buffers during test
        eDvcStatus, frequencyHz8 := tofSensor.getRangingFrequencyHz()                     ' Query sensor for
        showReadValue(@"frequencyHz8", frequencyHz8, eDvcStatus)

        eDvcStatus, eRangingMode := tofSensor.getRangingMode()                     ' Query sensor for
        showReadValue(@"eRangingMode", eRangingMode, eDvcStatus)

        eDvcStatus, ePowerMode := tofSensor.getPowerMode()
        showReadValue(@"ePowerMode", ePowerMode, eDvcStatus)

        eDvcStatus, timeMsec32 := tofSensor.getIntegrationTime()
        showReadValue(@"timeMsec32", timeMsec32, eDvcStatus)

        eDvcStatus, percent8 := tofSensor.getSharpenerPercent()
        showReadValue(@"percent8", percent8, eDvcStatus)

        eDvcStatus, targetOrder := tofSensor.getTargetOrder()
        showReadValue(@"targetOrder", targetOrder, eDvcStatus)

        debug("* STOPPED for evaluation of display")
        repeat  ' hold here for eval
'}

        tofSensor.startRanging()

        readCt := 10    ' set max read count
        repeat  until readCt <= 0
            ' wait for sensor to start ranging

            if not tofSensor.isRanging()
                debug("- ranging not started, waiting...")
                waitms(5000) ' Small delay between polling (5 sec)
                next

            ' is ranging, now let's show data every 5 sec
            ' Poll sensor for new data
            eDvcStatus, bDataReturned := tofSensor.isDataReadyToUnload()
            if bDataReturned
                eDvcStatus, bDataUnloaded := tofSensor.unloadRangingData()     ' Read distance data into array
                if bDataUnloaded
                    ' tell consumer
                    bDataReady := TRUE
                    ' now wait for consumer...
                    readCt--    ' count this one
                    repeat until bDataReady == FALSE ' hold until BG task displays it

                debug("* Main TEST HOLD")
                repeat
            else
                waitms(2000) ' Small delay between polling (2 sec)

        ' Stop Measurements
        tofSensor.stopRanging()

    repeat  ' halt here for now

CON

   MAX_SAMPLES_PER_ROW = 8

VAR

    LONG samples32[MAX_SAMPLES_PER_ROW]
    WORD samples16[MAX_SAMPLES_PER_ROW]
    BYTE samples8[MAX_SAMPLES_PER_ROW]

PRI taskMonitorRanging(imageWidth) | x, y, LONG samples[8]
' TASK: TOF Listener

    repeat  ' forever

        debug("* DTA-TSK: Waiting for data...width/height = ", udec_(imageWidth))
        debug(" ")
        ' wait for data to be ready
        repeat until bDataReady == TRUE ' hold until BG task displays it
        debug("* DTA-TSK: Have data, processing")

        ' The ST library returns the data transposed from zone mapping shown in datasheet
        ' Pretty-print data with increasing y, decreasing x to reflect reality
        'for (int y = 0 ; y <= imageWidth * (imageWidth - 1) ; y += imageWidth)
        debug(" -- Reflectance")
        repeat y from 0 to imageWidth - 1
            'for (int x = imageWidth - 1 ; x >= 0 ; x--)
            repeat x from imageWidth -1 to 0 step -1
                samples8[x] := tofSensor.sampleReflectance((y * imageWidth) + x)
            debug("- ", udec(y), ": ", udec_byte_array_(@samples8, imageWidth))
        debug(" ")
        '{
        debug(" -- TargetStatus")
        repeat y from 0 to imageWidth - 1
            'for (int x = imageWidth - 1 ; x >= 0 ; x--)
            repeat x from imageWidth -1 to 0 step -1
                samples8[x] := tofSensor.sampleTargetStatus((y * imageWidth) + x)
            debug("- ", udec(y), ": ", udec_byte_array_(@samples8, imageWidth))
        debug(" ")
        '}
        '{
        debug(" -- Target Distance")
        repeat y from 0 to imageWidth - 1
            'for (int x = imageWidth - 1 ; x >= 0 ; x--)
            repeat x from imageWidth -1 to 0 step -1
                samples16[x] := tofSensor.sampleDistanceMM((y * imageWidth) + x)
            debug("- ", udec(y), ": ", udec_word_array_(@samples16, imageWidth))
        debug(" ")
        '}
        '{
        debug(" -- NbTgtDetected")
        repeat y from 0 to imageWidth - 1
            'for (int x = imageWidth - 1 ; x >= 0 ; x--)
            repeat x from imageWidth -1 to 0 step -1
                samples8[x] := tofSensor.sampleNbTgtDetected((y * imageWidth) + x)
            debug("- ", udec(y), ": ", udec_byte_array_(@samples8, imageWidth))
        debug(" ")
        '}
        debug("* DTA-TSK: Done with data")
        bDataReady := FALSE


PUB sampleReflectance(index) : nValue8 | validIndex
PUB sampleTargetStatus(index) : nValue8 | validIndex

CON { ------ PRIVATE (Utility) Methods ------ }

PRI showReadValue(pMessage, nValue, nDvcStatus)
    if nDvcStatus == 0
        debug(" * ", zstr_(pMessage), " = ", udec_(nValue))
    else
        debug(" * ", zstr_(pMessage), " = ", udec_(nValue), udec(nDvcStatus))

PRI checkAndShowResult(valueSet, valueRead, eDvcStatus, pMessage)
    if eDvcStatus <> tofSensor.VL53L5CX_STATUS_OK
        debug("--> TEST ", zstr_(pMessage), " ERROR ", udec(eDvcStatus))
    elseif valueSet == valueRead - 1 or valueSet == valueRead + 1
        debug("--> TEST ", zstr_(pMessage), "  PASS: OK (w/rounding err) ")
    elseif valueSet <> valueRead
        debug("--> TEST ", zstr_(pMessage), " ERROR readback failure: ", udec(valueSet), " <> ", udec(valueRead))
    else
        debug("--> TEST ", zstr_(pMessage), "  PASS: OK! ")
    debug(" ")


PRI locateSensor() : ok | bDevicePresent, addrFound
    ' find and configure our mpu9dof device
    debug("* Setup...")
    tofSensor.enableDebug(TRUE)
    tofSensor.enableIODebug(TRUE)
    bDevicePresent := tofSensor.start(PIN_TOF_INT, PIN_TOF_RST, PIN_TOF_SDA, PIN_TOF_SCL, PIN_TOF_LPN, PIN_TOF_PWREN)  ' i2c @ 100kHz, no pull-ups
    if bDevicePresent
        addrFound := tofSensor.getI2CAddress()
        ok := true
        if(addrFound <> tofSensor.DVC_NOT_FOUND)
            debug("* Found at i2c addr: ", uhex_byte_(addrFound))
        else
            debug("* ERROR: Found no devices")
            ok := false
    tofSensor.enableIODebug(FALSE)

PRI moveSensorTo(newDvcId) : ok | eDvcStatus, readAddr
    tofSensor.enableIODebug(TRUE)
    eDvcStatus := tofSensor.setI2CAddress(newDvcId)
    readAddr := tofSensor.getI2CAddress()
    if readAddr == newDvcId
        debug("* Sensor moved to ", uhex_byte_(newDvcId))
    else
        debug("* Sensor STILL at ", uhex_byte_(readAddr), " vs. at ", uhex_byte_(newDvcId))
    tofSensor.enableIODebug(FALSE)

DAT { misc messages }

minusMsg    BYTE    "-",0
plusMsg    BYTE    0

PRI unscale(value, scale) : intPart, decimalPart, pSign
    intPart := value / scale
    decimalPart := value // scale
    pSign := (value < 0) ? @minusMsg : @plusMsg
    if decimalPart < 0
        decimalPart := 0 - decimalPart
    'term.fstr5(string("* Value %d scale(%d) -> %s%d.%d"), value, scale, pSign, intPart, decimalPart)
    'debug("* Value ", udec_(value), " scale(", udec_(scale), ") -> ", zstr_(pSign), udec(intPart), ".", udec(decimalPart))
    debug(`demoLog '* Value `(value) scale[`(scale)] -> ', zstr_(pSign), '`(intPart).`(decimalPart)')


PRI tearDown()
    ' stop anything that needs to be...
    tofSensor.stop()    ' pull ourself off the i2c bus

CON { --- TASK: keep live mpu9dof data --- }

VAR { captured sensor data }

    long rawMagX
    long rawMagY
    long rawMagZ
    long magX
    long magY
    long magZ

    long rawAccelX
    long rawAccelY
    long rawAccelZ
    long accelX
    long accelY
    long accelZ

    long rawGyroX
    long rawGyroY
    long rawGyroZ
    long gyroX
    long gyroY
    long gyroZ

    long roll
    long pitch
    long yaw
    long unused0
    long unused1
    long senseTimeMS

    long ticks1ms
    long ticks1us
    long ticks125ms

PRI taskReadSensor() | startTicks, startMS, statusOK
    ' start for this cog too
{
    debug("Quiesce...")

    ticks1ms   := (CLKFREQ / 1_000)
    ticks1us   := (CLKFREQ / 1_000_000)
    ticks125ms := ticks1ms * 125 * 2

    'tofSensor.enableDebug(TRUE)
    tofSensor.init(PIN_TOF_INT, PIN_TOF_RST, PIN_TOF_SDA, PIN_TOF_SCL, PIN_TOF_LPN, PIN_TOF_PWREN)  ' set pins to output low... so we can set LA trigger

    debug("* taskReadSensor()  started")
    statusOK := locateSensor()    ' start our i2c MPU 9DOF sensor
    if statusOK
        debug("calibration()")
        debug("calibration() Complete")

        debug("demo()")
        resetSensor(statusOK)

        repeat
            startTicks := getct()
            startMS := getms()

            rawAccelX, rawAccelY, rawAccelZ := tofSensor.readAccelRaw()
            accelX, accelY, accelZ := tofSensor.readAccel()

            rawGyroX, rawGyroY, rawGyroZ := tofSensor.readGyroRaw()
            gyroX, gyroY, gyroZ := tofSensor.readGyro()

            rawMagX, rawMagY, rawMagZ := tofSensor.readMagRaw()
            magX, magY, magZ := tofSensor.readMag()

            roll, pitch, yaw := tofSensor.getRollPitchYaw()

            senseTimeMS := getms() - startMS

            '   wait remainder of 125 mSec before next sample pass
            waitms(33)
            'waitct(startTicks + ticks125ms)    ' wait to create "sense" time-base
    else
        debug("no sensor, TASK aborted")

    tearDown()  ' stop any cogs, if needed
    debug("Done")
'}

PRI resetSensor(ok)
    if(ok)
        'tofSensor.configDefault()
        waitms(10)  ' guard


CON { -------------- demo-0 -------------- }

CON { --- HDMI Debug Support --- }

CON { Constants for HDMI Debug }

    DBG_GROUPS_CT = 3
    DBG_MAX_VARS_IN_GROUP = 7

VAR { * Data Structure for HDMI Debug * }

    LONG    pTitlesAr[DBG_GROUPS_CT + 1]    ' first value is max vars
    LONG    pVarCtAr[DBG_GROUPS_CT]
    LONG    pNamesAr[DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP]
    LONG    pValsAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]

DAT { Literals for HDMI Debug }

' acelerometer data
    nameTitle1  BYTE    "Accel",0
    name10      BYTE    "rawX",0
    name11      BYTE    "rawY",0
    name12      BYTE    "rawZ",0
    name13      BYTE    "X",0
    name14      BYTE    "Y",0
    name15      BYTE    "Z",0
nextAddr1
    dataLen1     LONG    @nextAddr1 - @nameTitle1

' magnetometer data
    nameTitle2  BYTE    "Mag",0
    name20      BYTE    "rawX",0
    name21      BYTE    "rawY",0
    name22      BYTE    "rawZ",0
    name23      BYTE    "X",0
    name24      BYTE    "Y",0
    name25      BYTE    "Z",0
nextAddr2
    dataLen2     LONG    @nextAddr2 - @nameTitle2

' gyroscope data
    nameTitle3  BYTE    "Gyro",0
    name30      BYTE    "rawX",0
    name31      BYTE    "rawY",0
    name32      BYTE    "rawZ",0
    name33      BYTE    "X",0
    name34      BYTE    "Y",0
    name35      BYTE    "Z",0
nextAddr3
    dataLen3     LONG    @nextAddr3 - @nameTitle3


PRI loadDisplayList() | nGrpOffset, nValsGrpOffset, nVarsInGroup
' do internal one-time setup of driver debug data
    nGrpOffset := 0
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle1
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
    ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name10
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name11
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name12
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name13
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name14
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name15
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawAccelX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawAccelY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawAccelZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @accelX
    LONG[@pValsAr][nValsGrpOffset + 4] := @accelY
    LONG[@pValsAr][nValsGrpOffset + 5] := @accelZ

    ' reset unused
    unused0 := 0
    unused1 := 0

    nGrpOffset := 1
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle2
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name20
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name21
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name22
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name23
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name24
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name25
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawMagX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawMagY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawMagZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @magX
    LONG[@pValsAr][nValsGrpOffset + 4] := @magY
    LONG[@pValsAr][nValsGrpOffset + 5] := @magZ

    nGrpOffset := 2
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle3
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name30
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name31
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name32
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name33
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name34
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name35
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawGyroX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawGyroY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawGyroZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @gyroX
    LONG[@pValsAr][nValsGrpOffset + 4] := @gyroY
    LONG[@pValsAr][nValsGrpOffset + 5] := @gyroZ


    ' tell our table size to reader
    nGrpOffset := 3
    LONG[@pTitlesAr][nGrpOffset] := DBG_MAX_VARS_IN_GROUP

PUB getDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars | tmpAbsPtr
'' Return pointers to HDMI-debug data structures for this motor-object instance
    loadDisplayList()
    nGroups := DBG_GROUPS_CT
    pGroupTitles := @pTitlesAr         ' pStr := long[pTitlesAr][grpIdx]
    pGroupVarCts := @pVarCtAr          ' nNbrGrpVars := long[pVarCtAr][grpIdx]
    pGroupNames := @pNamesAr           ' pGrpNameAr := long[pNamesAr][grpIdx], pVarName := long[pNameAr][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    pGroupVars := @pValsAr             ' pGrpLongVar := long[pValsAr][grpIdx][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    {
    if showHDMIDebug
        debug("* -------------")
        'debug("* 9DOF DAT values: ", uhex_long(@hall), uhex_long_array(@hall, 4))
        'debug("* 9DOF VAR values: ", uhex_long(@tvRpm_x10), uhex_long_array(@tvRpm_x10, 4))
        debug("* NAMEs SOURCE1: ", uhex_long(@nameTitle1), uhex_byte_array(@nameTitle1, dataLen1))
        debug("* NAMEs SOURCE2: ", uhex_long(@nameTitle2), uhex_byte_array(@nameTitle2, dataLen2))
        debug("* NAMEs SOURCE3: ", uhex_long(@nameTitle3), uhex_byte_array(@nameTitle3, dataLen3))
        debug("* -------------")
        debug("* 9DOF DL title: ", uhex_long(@pTitlesAr), uhex_long_array(@pTitlesAr, DBG_GROUPS_CT + 1))
        debug("* 9DOF DL VarCt: ", uhex_long(@pVarCtAr), uhex_long_array(@pVarCtAr, DBG_GROUPS_CT))
        debug("* 9DOF DL Names: ", uhex_long(@pNamesAr), uhex_long_array(@pNamesAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* 9DOF DL Values: ", uhex_long(@pValsAr), uhex_long_array(@pValsAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* -------------")
        debug("* 9DOF PARM values: ", uhex_long(@nGroups), uhex_long_array(@nGroups, 5))
        debug("* -------------")
        debug("* 9DOF Sent: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        debug("* =============")
    '}


CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
