'' =================================================================================================
''
''   File....... demo_pcf8575.spin2
''   Purpose.... Utility to demonstrate interaction with our PCF8575 I/O Expander
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Aug 2022
''   Updated.... 22 Aug 2022
''
'' =================================================================================================

CON { timing }

    CLK_FREQ = 270_000_000                                        ' system freq as a constant
    _clkfreq = CLK_FREQ                                           ' set system clock
    MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
    US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

    BR_TERM  = 230_400                                            ' terminal baud rate

CON { fixed io pins }

    RX1      = 63  { I }                                          ' programming / debug
    TX1      = 62  { O }

    SF_CS    = 61  { O }                                          ' serial flash
    SF_SCK   = 60  { O }
    SF_SDO   = 59  { O }
    SF_SDI   = 58  { I }

    SD_SCK   = 61  { O }                                          ' sd card
    SD_CS    = 60  { O }
    SD_SDI   = 59  { O }
    SD_SDO   = 58  { I }

    SDA1     = 57  { IO }                                         ' i2c (optional)
    SCL1     = 56  { IO }

CON { app io pins }

    PIN_HDMI_BASE = 8

    PIN_PCF8575_SDA     = 16
    PIN_PCF8575_SCL     = 17
    PIN_PCF8575_INT     = 18

CON { basic constants }

    #true, ON, OFF                                                ' digital control
    #0, NO, YES

    TRIES = 1                                                     ' should not be needed!

    #0, S_LIST, S_MATRIX                                          ' display styles

    STYLE = S_MATRIX                                              ' selected style

    OUTBIT_P0_5_BIT05 = pcf8575.BIT_P05
    OUTBIT_P1_4_BIT12 = pcf8575.BIT_P14

    TEST_WORD_CT    = 4

OBJ { our sensors }

    pcf8575     : "isp_pcf8575"                 ' our device under test

VAR
    LONG    cog

DAT { run-time condition vars }

    readArray       WORD   0[TEST_WORD_CT]

CON { -------------- MAIN -------------- }

PUB main() : ok | statusOK, bHaveINT, testWord, deviceFound
    '' Main entry point of pcf8575 demo
    pcf8575.enableDebug(TRUE)

    ' find and configure our pcf8575 device

    debug("* Setup...")
    deviceFound := pcf8575.start(PIN_PCF8575_SCL, PIN_PCF8575_SDA, PIN_PCF8575_INT)  ' i2c @ 400kHz, no pull-ups

    debug("* ID device address...")
    deviceFound := pcf8575.deviceID()
    ok := true
    if(deviceFound <> pcf8575.DVC_NOT_FOUND)
        debug("* Found Addr-`$(deviceFound)")
        ' NOT NEEDED  pcf8575.writeWord($FFFF)    ' set all bits to input
    else
        debug("* ERROR: Found no devices")
        ok := false


    if ok

        setBit(17, 0)                   ' fail set BAD bit number
        setBit(OUTBIT_P0_5_BIT05, 0)    ' fail set NOT output

        \pcf8575.setBitDirection(OUTBIT_P0_5_BIT05, pcf8575.BIT_IS_OUTPUT)
        \pcf8575.setBitDirection(OUTBIT_P1_4_BIT12, pcf8575.BIT_IS_OUTPUT)

        setBit(OUTBIT_P0_5_BIT05, 0)
        setBit(OUTBIT_P0_5_BIT05, 1)
        toggleBit(OUTBIT_P0_5_BIT05)
        toggleBit(OUTBIT_P0_5_BIT05)

        setBit(OUTBIT_P1_4_BIT12, 0)
        toggleBit(OUTBIT_P1_4_BIT12)
        toggleBit(OUTBIT_P1_4_BIT12)

        bHaveINT := \pcf8575.getIntPinState()
        debug(" * check INT ", sdec(bHaveINT))

        'testWord := \pcf8575.getInputBits()
        statusOK := \pcf8575.getInputBitsNTimes(@readArray, TEST_WORD_CT)
        if statusOK == pcf8575.READ_ERROR
            debug("  - read ERROR")
        else
            debug("* show input pins: ", UHEX_WORD_ARRAY(@readArray, TEST_WORD_CT))

        toggleBit(OUTBIT_P1_4_BIT12)
        toggleBit(OUTBIT_P0_5_BIT05)
        toggleBit(OUTBIT_P1_4_BIT12)

        debug("* Test Complete...")

    pcf8575.stop()    ' pull ourself off the i2c bus
    repeat  ' hold here


PRI setBit(bitNbr, bitValue)
    debug("* set BIT-#`(bitNbr) to `(bitValue)")
    \pcf8575.setOutputBitValue(bitNbr, bitValue)

PRI toggleBit(bitNbr)
    debug("* invert BIT-#`(bitNbr)")
    \pcf8575.toggleOutputBit(bitNbr)

CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
