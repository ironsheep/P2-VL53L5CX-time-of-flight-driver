'' =================================================================================================
''
''   File....... demo_pcf8575.spin2
''   Purpose.... Utility to demonstrate interaction with our PCF8575 I/O Expander
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Aug 2022
''   Updated.... 22 Aug 2022
''
'' =================================================================================================

CON { timing }

    CLK_FREQ = 270_000_000                                        ' system freq as a constant
    _clkfreq = CLK_FREQ                                           ' set system clock
    MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
    US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

    BR_TERM  = 230_400                                            ' terminal baud rate

CON { fixed io pins }

    RX1      = 63  { I }                                          ' programming / debug
    TX1      = 62  { O }

    SF_CS    = 61  { O }                                          ' serial flash
    SF_SCK   = 60  { O }
    SF_SDO   = 59  { O }
    SF_SDI   = 58  { I }

    SD_SCK   = 61  { O }                                          ' sd card
    SD_CS    = 60  { O }
    SD_SDI   = 59  { O }
    SD_SDO   = 58  { I }

    SDA1     = 57  { IO }                                         ' i2c (optional)
    SCL1     = 56  { IO }

CON { app io pins }

    PIN_HDMI_BASE = 8

    PIN_PCF8575_SCL     = 25
    PIN_PCF8575_SDA     = 26
    PIN_PCF8575_INT     = 24

CON { basic constants }

    #true, ON, OFF                                                ' digital control
    #0, NO, YES

    TRIES = 1                                                     ' should not be needed!

    #0, S_LIST, S_MATRIX                                          ' display styles

    STYLE = S_MATRIX                                              ' selected style

    OUTBIT_P0_5_BIT05 = pcf8575.BIT_P05
    OUTBIT_P1_4_BIT12 = pcf8575.BIT_P14

    TEST_WORD_CT    = 4

OBJ { our sensors }

    pcf8575     : "isp_pcf8575"                 ' our device under test
    tvDebug     : "isp_hdmi_debug"              ' Our HDMI display

VAR
    LONG    cog

DAT { run-time condition vars }

    bUseHDMI        LONG    FALSE        ' set to TRUE to enable HDMI use/output
    showHDMIDebug   LONG    FALSE

    senseStack      LONG    0[64]

    senseCog        LONG    0

    readArray       WORD   0[TEST_WORD_CT]

    screenTitle     BYTE    "-- PCF8575 object Debug --", 0

CON { -------------- MAIN -------------- }

PUB main() | statusOK, nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars, basePin, bHaveINT, testWord
    '' Main entry point of MPU 9DOF demo
    debug(`term demoLog pos 700 455 size 70 14 textsize 12 color cyan)

    if bUseHDMI
        tvDebug.start(PIN_HDMI_BASE, @screenTitle)

        nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := getDebugData()
        debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)
    else
        showHDMIDebug := FALSE  ' force this off if not using HDMI

    pcf8575.enableDebug(TRUE)
    initExpander(PIN_PCF8575_SCL, PIN_PCF8575_SDA, PIN_PCF8575_INT)  ' set pins to output low... so we can set LA trigger

    setBit(17, 0)                   ' fail set BAD bit number
    setBit(OUTBIT_P0_5_BIT05, 0)    ' fail set NOT output

    \pcf8575.setBitDirection(OUTBIT_P0_5_BIT05, pcf8575.BIT_IS_OUTPUT)
    \pcf8575.setBitDirection(OUTBIT_P1_4_BIT12, pcf8575.BIT_IS_OUTPUT)

    setBit(OUTBIT_P0_5_BIT05, 0)
    setBit(OUTBIT_P0_5_BIT05, 1)
    toggleBit(OUTBIT_P0_5_BIT05)
    toggleBit(OUTBIT_P0_5_BIT05)

    setBit(OUTBIT_P1_4_BIT12, 0)
    toggleBit(OUTBIT_P1_4_BIT12)
    toggleBit(OUTBIT_P1_4_BIT12)

    bHaveINT := \pcf8575.getIntPinState()
    debug(`demoLog 'check INT `sdec(bHaveINT)' 10)

    'testWord := \pcf8575.getInputBits()
    statusOK := \pcf8575.getInputBitsNTimes(@readArray, TEST_WORD_CT)
    if statusOK == pcf8575.READ_ERROR
        debug(`demoLog '- read ERROR' 10)
    else
        debug(`demoLog 'show input pins: `UHEX_WORD_ARRAY(@readArray, TEST_WORD_CT)' 10)

    toggleBit(OUTBIT_P1_4_BIT12)
    toggleBit(OUTBIT_P0_5_BIT05)
    toggleBit(OUTBIT_P1_4_BIT12)

    repeat  ' hold here


PUB setBit(bitNbr, bitValue)
    debug(`demoLog 'set BIT-#`(bitNbr) to `(bitValue)' 10)
    \pcf8575.setOutputBitValue(bitNbr, bitValue)

PUB toggleBit(bitNbr)
    debug(`demoLog 'invert BIT-#`(bitNbr)' 10)
    \pcf8575.toggleOutputBit(bitNbr)

CON { ------ PRIVATE (Utility) Methods ------ }


PRI initExpander(pinSCL, pinSDA, pinINT) : ok | deviceFound
    ' find and configure our mpu9dof device
    debug(`demoLog 'Setup...' 10)
    deviceFound := pcf8575.start(pinSCL, pinSDA, pinINT)  ' i2c @ 400kHz, no pull-ups

    debug(`demoLog 'ID device address...' 10)
    deviceFound := pcf8575.deviceID()
    ok := true
    if(deviceFound <> pcf8575.DVC_NOT_FOUND)
        debug(`demoLog 'Found Addr-`$(deviceFound)' 10)
        ' NOT NEEDED  pcf8575.writeWord($FFFF)    ' set all bits to input
    else
        debug(`demoLog 'ERROR: Found no devices' 10)
        ok := false


PRI tearDown()
    ' stop anything that needs to be...
    pcf8575.stop()    ' pull ourself off the i2c bus

CON { --- TASK: keep live mpu9dof data --- }

VAR { captured sensor data }

    LONG rawMagX
    LONG rawMagY
    LONG rawMagZ
    LONG magX
    LONG magY
    LONG magZ

    LONG rawAccelX
    LONG rawAccelY
    LONG rawAccelZ
    LONG accelX
    LONG accelY
    LONG accelZ

    LONG rawGyroX
    LONG rawGyroY
    LONG rawGyroZ
    LONG gyroX
    LONG gyroY
    LONG gyroZ

    LONG roll
    LONG pitch
    LONG yaw
    LONG unused0
    LONG unused1
    LONG senseTimeMS

    LONG ticks1ms
    LONG ticks1us
    LONG ticks125ms

PRI taskReadSensor() | startTicks, startMS, statusOK
    ' start for this cog too
    {
    debug("Quiesce...")

    ticks1ms   := (CLKFREQ / 1_000)
    ticks1us   := (CLKFREQ / 1_000_000)
    ticks125ms := ticks1ms * 125 * 2

    debug("* taskReadSensor()  started")
    statusOK := initExpander()    ' start our i2c MPU 9DOF sensor
    if statusOK
        debug("calibration()")
        calibrateSensor()
        debug("calibration() Complete")

        debug("demo()")
        resetSensor(statusOK)

        repeat
            startTicks := getct()
            startMS := getms()

            rawAccelX, rawAccelY, rawAccelZ := pcf8575.readAccelRaw()
            accelX, accelY, accelZ := pcf8575.readAccel()

            rawGyroX, rawGyroY, rawGyroZ := pcf8575.readGyroRaw()
            gyroX, gyroY, gyroZ := pcf8575.readGyro()

            rawMagX, rawMagY, rawMagZ := pcf8575.readMagRaw()
            magX, magY, magZ := pcf8575.readMag()

            roll, pitch, yaw := pcf8575.getRollPitchYaw()

            senseTimeMS := getms() - startMS

            '   wait remainder of 125 mSec before next sample pass
            waitms(33)
            'waitct(startTicks + ticks125ms)    ' wait to create "sense" time-base
    else
        debug("no sensor, TASK aborted")

    tearDown()  ' stop any cogs, if needed
    debug("Done")
'}

DAT { cal data }

accelBiasXYZ LONG    0[3]
gyroBiasXYZ LONG    0[3]
'}
PRI calibrateSensor()
    ' put sensor thru calibration paces
    'pcf8575.enableDebug(TRUE)

    'pcf8575.calibrateMPU9150(@gyroBiasXYZ, @accelBiasXYZ)
    {
    debug("- Calibration Offsets  - - - - - - - - - - - - - - - -")
    debug(`demoLog ' Accel X : `(LONG [@accelBiasXYZ][0])   |   Gyro X : `(LONG [@gyroBiasXYZ][0])' 10)
    debug(`demoLog ' Accel Y : `(LONG [@accelBiasXYZ][1])   |   Gyro Y : `(LONG [@gyroBiasXYZ][1])' 10)
    debug(`demoLog ' Accel Z : `(LONG [@accelBiasXYZ][2])   |   Gyro Z : `(LONG [@gyroBiasXYZ][2])' 10)
    debug("- - - - - - - - - - - - - - - - - - - - - -- - - - - -")
    '}

    'pcf8575.enableDebug(FALSE)

{
PRI resetSensor(ok)
    if(ok)
        pcf8575.configDefault()
        waitms(10)  ' guard
'}

CON { -------------- demo-0 -------------- }

{
PUB demo0(loopCt) | accel_x, accel_y, accel_z, temperatureInC, decimalInC, gyro_x, gyro_y, gyro_z, mag_x, mag_y, mag_z, temperatureInF, decimalInF
    '' Actual MPU 9DOF demo - read regs and display values
    if loopCt <= 0
        loopCt := 1

    ' loop 1 - N times
    repeat loopCt
        accel_x, accel_y, accel_z := pcf8575.readAccel()
        waitms(10)
        gyro_x, gyro_y, gyro_z := pcf8575.readGyro()
        waitms(10)
        mag_x, mag_y, mag_z := pcf8575.readMag()
        waitms(10)
        temperatureInC, decimalInC := pcf8575.readTemperature()
        temperatureInF, decimalInF := pcf8575.comvert2TempInF(temperatureInC, decimalInC)


        tmpIntX, tmpDecimalX, pSignX := unscale(accel_x, 1000)
        tmpIntY, tmpDecimalY, pSignY := unscale(accel_x, 1000)
        tmpIntZ, tmpDecimalZ, pSignZ := unscale(accel_x, 1000)

        debug(`demoLog ' Accel X : `(tmpIntX).`(tmpDecimalX) | Gyro X : `(gyro_x) | Mag X : `(mag_x)' 10)
        debug(`demoLog ' Accel Y : `(tmpIntY).`(tmpDecimalY) | Gyro Y : `(gyro_y) | Mag Y : `(mag_y)' 10)
        debug(`demoLog ' Accel Z : `(tmpIntZ).`(tmpDecimalZ) | Gyro Z : `(gyro_z) | Mag Z : `(mag_z)' 10)
        debug("\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
        debug(`demoLog 'Temperature: `(temperatureInC).`(decimalInC) C' 10)
        debug(`demoLog 'Temperature: `(temperatureInF).`(decimalInF) F')
        debug("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n")

        waitms(3000)
'}


CON { -------------- demo-1 -------------- }

DAT { demo1 data: sample names }

{

sample0 BYTE    "top",0
sample1 BYTE    "toLeft",0
sample2 BYTE    "toRight",0
sample3 BYTE    "PCF8575ront",0
sample4 BYTE    "toBack",0
sample5 BYTE    "bottom",0

' float conversion crap
tmpIntX     LONG    0
tmpDecimalX LONG    0
pSignX      LONG    0
tmpIntY     LONG    0
tmpDecimalY LONG    0
pSignY      LONG    0
tmpIntZ     LONG    0
tmpDecimalZ LONG    0
pSignZ      LONG    0

sampleNames LONG    @sample0, @sample1, @sample2, @sample3, @sample4, @sample5

PUB demo1(loopCt) | pName, loopIndex, accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, mag_x, mag_y, mag_z
    if loopCt <= 0
        loopCt := 1

    ' loop 1 - N times
    pName := LONG [@sampleNames][0]
    debug(`demoLog '-->  Set Up:  `(0+1)')
    waitms(3000)
    repeat loopIndex from 0 to loopCt - 1
        pName := LONG [@sampleNames][loopIndex]
        accel_x, accel_y, accel_z := pcf8575.readAccelRaw()
        gyro_x, gyro_y, gyro_z := pcf8575.readGyroRaw()
        mag_x, mag_y, mag_z := pcf8575.readMagRaw()
        tmpIntX, tmpDecimalX, pSignX := unscale(accel_x, 1000)
        tmpIntY, tmpDecimalY, pSignY := unscale(accel_y, 1000)
        tmpIntZ, tmpDecimalZ, pSignZ := unscale(accel_z, 1000)

        debug(`demoLog 10 '- `(loopIndex+1)  - - - - - - - - - - -')
        debug(`demoLog ' Accel X : `(tmpIntX).`(tmpDecimalX)   |   Gyro X : `(gyro_x)   |   Mag X : `(mag_x)')
        debug(`demoLog ' Accel Y : `(tmpIntY).`(tmpDecimalY)    |   Gyro Y : `(gyro_y)   |   Mag Y : `(mag_y)')
        debug(`demoLog ' Accel Z : `(tmpIntZ).`(tmpDecimalZ)    |   Gyro Z : `(gyro_z)   |   Mag Z : `(mag_z)')
        debug(`demoLog '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -' 10)

        pName := LONG [@sampleNames][loopIndex+1]
        debug(`demoLog 10 '-->  Set Up:  `(loopIndex+2)' 10)
        waitms(3000)
'}

CON { --- HDMI Debug Support --- }

CON { Constants for HDMI Debug }

    DBG_GROUPS_CT = 4
    DBG_MAX_VARS_IN_GROUP = 7

VAR { * Data Structure for HDMI Debug * }

    LONG    pTitlesAr[DBG_GROUPS_CT + 1]    ' first value is max vars
    LONG    pVarCtAr[DBG_GROUPS_CT]
    LONG    pNamesAr[DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP]
    LONG    pValsAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]

DAT { Literals for HDMI Debug }

' acelerometer data
    nameTitle1  BYTE    "Accel",0
    name10      BYTE    "rawX",0
    name11      BYTE    "rawY",0
    name12      BYTE    "rawZ",0
    name13      BYTE    "X",0
    name14      BYTE    "Y",0
    name15      BYTE    "Z",0
nextAddr1
    dataLen1     LONG    @nextAddr1 - @nameTitle1

' magnetometer data
    nameTitle2  BYTE    "Mag",0
    name20      BYTE    "rawX",0
    name21      BYTE    "rawY",0
    name22      BYTE    "rawZ",0
    name23      BYTE    "X",0
    name24      BYTE    "Y",0
    name25      BYTE    "Z",0
nextAddr2
    dataLen2     LONG    @nextAddr2 - @nameTitle2

' gyroscope data
    nameTitle3  BYTE    "Gyro",0
    name30      BYTE    "rawX",0
    name31      BYTE    "rawY",0
    name32      BYTE    "rawZ",0
    name33      BYTE    "X",0
    name34      BYTE    "Y",0
    name35      BYTE    "Z",0
nextAddr3
    dataLen3     LONG    @nextAddr3 - @nameTitle3

' orientation data & misc data
    nameTitle4  BYTE    "Orientation+",0
    name40      BYTE    "roll",0
    name41      BYTE    "pitch",0
    name42      BYTE    "yaw",0
    name43      BYTE    " -",0
    name44      BYTE    " -",0
    name45      BYTE    "sens-ms",0
nextAddr4
    dataLen4     LONG    @nextAddr4 - @nameTitle4

PRI loadDisplayList() | nGrpOffset, nValsGrpOffset, nVarsInGroup
' do internal one-time setup of driver debug data
    nGrpOffset := 0
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle1
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
    ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name10
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name11
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name12
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name13
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name14
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name15
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawAccelX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawAccelY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawAccelZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @accelX
    LONG[@pValsAr][nValsGrpOffset + 4] := @accelY
    LONG[@pValsAr][nValsGrpOffset + 5] := @accelZ

    ' reset unused
    unused0 := 0
    unused1 := 0

    nGrpOffset := 1
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle2
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name20
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name21
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name22
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name23
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name24
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name25
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawMagX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawMagY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawMagZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @magX
    LONG[@pValsAr][nValsGrpOffset + 4] := @magY
    LONG[@pValsAr][nValsGrpOffset + 5] := @magZ

    nGrpOffset := 2
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle3
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name30
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name31
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name32
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name33
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name34
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name35
    LONG[@pValsAr][nValsGrpOffset + 0] := @rawGyroX
    LONG[@pValsAr][nValsGrpOffset + 1] := @rawGyroY
    LONG[@pValsAr][nValsGrpOffset + 2] := @rawGyroZ
    LONG[@pValsAr][nValsGrpOffset + 3] := @gyroX
    LONG[@pValsAr][nValsGrpOffset + 4] := @gyroY
    LONG[@pValsAr][nValsGrpOffset + 5] := @gyroZ

    nGrpOffset := 3
    nVarsInGroup := 6
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle4
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name40
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name41
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name42
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name43
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name44
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name45
    LONG[@pValsAr][nValsGrpOffset + 0] := @roll
    LONG[@pValsAr][nValsGrpOffset + 1] := @pitch
    LONG[@pValsAr][nValsGrpOffset + 2] := @yaw
    LONG[@pValsAr][nValsGrpOffset + 3] := @unused0
    LONG[@pValsAr][nValsGrpOffset + 4] := @unused1
    LONG[@pValsAr][nValsGrpOffset + 5] := @senseTimeMS

    ' tell our table size to reader
    nGrpOffset := 4
    LONG[@pTitlesAr][nGrpOffset] := DBG_MAX_VARS_IN_GROUP

PUB getDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars | tmpAbsPtr
'' Return pointers to HDMI-debug data structures for this motor-object instance
    loadDisplayList()
    nGroups := DBG_GROUPS_CT
    pGroupTitles := @pTitlesAr         ' pStr = LONG[pTitlesAr][grpIdx]
    pGroupVarCts := @pVarCtAr          ' nNbrGrpVars = LONG[pVarCtAr][grpIdx]
    pGroupNames := @pNamesAr           ' pGrpNameAr = LONG[pNamesAr][grpIdx], pVarName = LONG[pNameAr][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    pGroupVars := @pValsAr             ' pGrpLongVar = LONG[pValsAr][grpIdx][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    {
    if showHDMIDebug
        debug("* -------------")
        'debug("* 9DOF DAT values: ", uhex_long(@hall), uhex_long_array(@hall, 4))
        'debug("* 9DOF VAR values: ", uhex_long(@tvRpm_x10), uhex_long_array(@tvRpm_x10, 4))
        debug("* NAMEs SOURCE1: ", uhex_long(@nameTitle1), uhex_byte_array(@nameTitle1, dataLen1))
        debug("* NAMEs SOURCE2: ", uhex_long(@nameTitle2), uhex_byte_array(@nameTitle2, dataLen2))
        debug("* NAMEs SOURCE3: ", uhex_long(@nameTitle3), uhex_byte_array(@nameTitle3, dataLen3))
        debug("* -------------")
        debug("* 9DOF DL title: ", uhex_long(@pTitlesAr), uhex_long_array(@pTitlesAr, DBG_GROUPS_CT + 1))
        debug("* 9DOF DL VarCt: ", uhex_long(@pVarCtAr), uhex_long_array(@pVarCtAr, DBG_GROUPS_CT))
        debug("* 9DOF DL Names: ", uhex_long(@pNamesAr), uhex_long_array(@pNamesAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* 9DOF DL Values: ", uhex_long(@pValsAr), uhex_long_array(@pValsAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* -------------")
        debug("* 9DOF PARM values: ", uhex_long(@nGroups), uhex_long_array(@nGroups, 5))
        debug("* -------------")
        debug("* 9DOF Sent: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        debug("* =============")
    '}


CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
